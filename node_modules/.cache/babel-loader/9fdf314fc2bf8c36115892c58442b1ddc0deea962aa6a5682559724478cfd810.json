{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport TimeEntryForm from './components/TimeEntryForm.vue';\nexport default {\n  components: {\n    TimeEntryForm\n  },\n  data() {\n    return {\n      entries: JSON.parse(localStorage.getItem('entries')) || {}\n    };\n  },\n  computed: {\n    filteredEntries() {\n      const filtered = {};\n      for (const userName in this.entries) {\n        const userEntries = this.entries[userName].filter(entry => entry.userName && entry.date && entry.startTime && entry.endTime && entry.taskDescription);\n        if (userEntries.length) {\n          filtered[userName] = userEntries;\n        }\n      }\n      return filtered;\n    }\n  },\n  methods: {\n    handleFormSubmit(newEntry) {\n      const {\n        userName\n      } = newEntry;\n      if (!this.entries[userName]) {\n        this.entries[userName] = [];\n      }\n\n      // Ellenőrizzük, hogy van-e már bejegyzés a megadott dátummal\n      const existingEntryIndex = this.entries[userName].findIndex(entry => entry.date === newEntry.date && entry.startTime === newEntry.startTime);\n      if (existingEntryIndex !== -1) {\n        // Ha létezik bejegyzés, frissítjük\n        this.entries[userName][existingEntryIndex] = newEntry;\n      } else {\n        // Új bejegyzés hozzáadása\n        this.entries[userName].push(newEntry);\n      }\n      this.saveEntries();\n      this.resetForm(); // Forma visszaállítása\n    },\n    editEntry(entry, userName) {\n      // Frissítjük a formot a kiválasztott bejegyzéssel\n      this.$refs.entryForm.setFormData(entry);\n      // Csak a kiválasztott bejegyzést távolítjuk el\n      const index = this.entries[userName].indexOf(entry);\n      if (index !== -1) {\n        this.entries[userName].splice(index, 1); // Töröljük a kiválasztott bejegyzést a listából\n      }\n      this.saveEntries(); // Frissítjük a helyi tárolót\n    },\n    deleteEntry(userName, index) {\n      this.entries[userName].splice(index, 1);\n      if (this.entries[userName].length === 0) {\n        delete this.entries[userName]; // Ha nincs több bejegyzés, töröljük a felhasználót\n      }\n      this.saveEntries();\n    },\n    resetForm() {\n      // Visszaállítjuk a form értékeit üresre\n      this.$refs.entryForm.resetForm();\n    },\n    saveEntries() {\n      localStorage.setItem('entries', JSON.stringify(this.entries));\n    }\n  }\n};","map":{"version":3,"names":["TimeEntryForm","components","data","entries","JSON","parse","localStorage","getItem","computed","filteredEntries","filtered","userName","userEntries","filter","entry","date","startTime","endTime","taskDescription","length","methods","handleFormSubmit","newEntry","existingEntryIndex","findIndex","push","saveEntries","resetForm","editEntry","$refs","entryForm","setFormData","index","indexOf","splice","deleteEntry","setItem","stringify"],"sources":["/Users/vasadidavid/Desktop/motibro/my-time-tracker/src/App.vue"],"sourcesContent":["<template>\n  <div class=\"max-w-4xl mx-auto p-6\">\n    <h1 class=\"text-2xl font-bold mb-6\">Időnyilvántartó rendszer</h1>\n    <TimeEntryForm @submit=\"handleFormSubmit\" ref=\"entryForm\" />\n    <div class=\"mt-6\">\n      <h2 class=\"text-xl font-semibold\">Bejegyzések</h2>\n      <div v-if=\"Object.keys(filteredEntries).length === 0\" class=\"mt-4\">\n        <p>Nincsenek bejegyzések.</p>\n      </div>\n      <div v-for=\"(userEntries, userName) in filteredEntries\" :key=\"userName\" class=\"mb-4\">\n        <!-- Csak akkor jelenítjük meg a nevet, ha van bejegyzés -->\n        <h3 v-if=\"userEntries.length > 0\" class=\"font-semibold\">{{ userName }}</h3>\n        <div v-for=\"(entry, index) in userEntries\" :key=\"index\" class=\"border p-4 mt-2 rounded\">\n          <p><strong>Munkavállaló neve:</strong> {{ entry.userName }}</p>\n          <p><strong>Dátum:</strong> {{ entry.date }}</p>\n          <p><strong>Kezdési idő:</strong> {{ entry.startTime }}</p>\n          <p><strong>Befejezési idő:</strong> {{ entry.endTime }}</p>\n          <p><strong>Feladat leírása:</strong> {{ entry.taskDescription }}</p>\n          <button @click=\"editEntry(entry, userName)\" class=\"mt-2 bg-yellow-500 text-white p-2 rounded\">Módosítás</button>\n          <button @click=\"deleteEntry(userName, index)\" class=\"mt-2 bg-red-500 text-white p-2 rounded\">Törlés</button>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport TimeEntryForm from './components/TimeEntryForm.vue';\n\nexport default {\n  components: {\n    TimeEntryForm,\n  },\n  data() {\n    return {\n      entries: JSON.parse(localStorage.getItem('entries')) || {},\n    };\n  },\n  computed: {\n    filteredEntries() {\n      const filtered = {};\n      for (const userName in this.entries) {\n        const userEntries = this.entries[userName].filter(entry =>\n          entry.userName && entry.date && entry.startTime && entry.endTime && entry.taskDescription\n        );\n        if (userEntries.length) {\n          filtered[userName] = userEntries;\n        }\n      }\n      return filtered;\n    },\n  },\n  methods: {\n    handleFormSubmit(newEntry) {\n      const { userName } = newEntry;\n\n      if (!this.entries[userName]) {\n        this.entries[userName] = [];\n      }\n\n      // Ellenőrizzük, hogy van-e már bejegyzés a megadott dátummal\n      const existingEntryIndex = this.entries[userName].findIndex(\n        entry => entry.date === newEntry.date && entry.startTime === newEntry.startTime\n      );\n\n      if (existingEntryIndex !== -1) {\n        // Ha létezik bejegyzés, frissítjük\n        this.entries[userName][existingEntryIndex] = newEntry; \n      } else {\n        // Új bejegyzés hozzáadása\n        this.entries[userName].push(newEntry); \n      }\n\n      this.saveEntries();\n      this.resetForm(); // Forma visszaállítása\n    },\n    editEntry(entry, userName) {\n      // Frissítjük a formot a kiválasztott bejegyzéssel\n      this.$refs.entryForm.setFormData(entry);\n      // Csak a kiválasztott bejegyzést távolítjuk el\n      const index = this.entries[userName].indexOf(entry);\n      if (index !== -1) {\n        this.entries[userName].splice(index, 1); // Töröljük a kiválasztott bejegyzést a listából\n      }\n      this.saveEntries(); // Frissítjük a helyi tárolót\n    },\n    deleteEntry(userName, index) {\n      this.entries[userName].splice(index, 1);\n      if (this.entries[userName].length === 0) {\n        delete this.entries[userName]; // Ha nincs több bejegyzés, töröljük a felhasználót\n      }\n      this.saveEntries();\n    },\n    resetForm() {\n      // Visszaállítjuk a form értékeit üresre\n      this.$refs.entryForm.resetForm();\n    },\n    saveEntries() {\n      localStorage.setItem('entries', JSON.stringify(this.entries));\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* Custom styles for your App.vue */\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}